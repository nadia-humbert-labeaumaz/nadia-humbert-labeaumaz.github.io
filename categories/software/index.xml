<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software on Nadia Humbert-Labeaumaz</title><link>http://examplesite.org/categories/software/</link><description>Recent content in Software on Nadia Humbert-Labeaumaz</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Nadia Humbert-Labeaumaz • 2021</copyright><lastBuildDate>Sun, 17 Sep 2017 16:09:24 +0200</lastBuildDate><atom:link href="http://examplesite.org/categories/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing Java Spring Boot Microservices</title><link>http://examplesite.org/blog/2017-09-17-testing-java-spring-cloud-microservices/</link><pubDate>Sun, 17 Sep 2017 16:09:24 +0200</pubDate><guid>http://examplesite.org/blog/2017-09-17-testing-java-spring-cloud-microservices/</guid><description>Tests are an essential part of our codebase. At the very least, they minimize the risk of regression when we modify our code. There are several types of tests and each has a specific role: unit tests, integration tests, component tests, contract tests and end-to-end tests.</description></item><item><title>How to Write Robust Component Tests</title><link>http://examplesite.org/blog/2017-09-16-how-to-write-robust-component-tests/</link><pubDate>Sat, 16 Sep 2017 13:37:12 +0200</pubDate><guid>http://examplesite.org/blog/2017-09-16-how-to-write-robust-component-tests/</guid><description>Component tests allow to test complete use cases from end to end. They are often expensive especially in terms of setup and execution time. Thus, thought needs to be given to define their scope.</description></item><item><title>Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot</title><link>http://examplesite.org/blog/2017-07-23-setup-a-circuit-breaker-with-hystrix/</link><pubDate>Sun, 23 Jul 2017 13:33:38 +0200</pubDate><guid>http://examplesite.org/blog/2017-07-23-setup-a-circuit-breaker-with-hystrix/</guid><description>In a microservices architecture, several things can go wrong. A middleware, the network or the service you want to contact can be down. In this world of uncertainty, you have to anticipate problems in order not to break the entire chain and throw an error to the end user when you could offer a partially degraded service instead.</description></item><item><title>Refactoring Conditional Structures with Map</title><link>http://examplesite.org/blog/2017-07-20-refactoring-conditional-with-map/</link><pubDate>Thu, 20 Jul 2017 15:32:15 +0100</pubDate><guid>http://examplesite.org/blog/2017-07-20-refactoring-conditional-with-map/</guid><description>When working on already existing codebases, I often encounter pieces of code that look like this:
public class Day { public void start(Weather weather) { switch(weather) { case RAINY: takeAnUmbrella(); break; case SUNNY: takeAHat(); break; case STORMY: stayHome(); break; default: doNothing(); break; } } } Basically, depending on the weather, an action has to be taken.</description></item><item><title>Go Back in Time with Git</title><link>http://examplesite.org/blog/2017-04-19-go-back-in-time-with-git/</link><pubDate>Wed, 19 Apr 2017 20:22:15 +0100</pubDate><guid>http://examplesite.org/blog/2017-04-19-go-back-in-time-with-git/</guid><description>Recently, I conducted a workshop about how to go back in time with Git alongside Renaud. Here are the main points that were raised during this session.
Case #1: Delete the Last Commit The initial Git tree used to illustrate this case is:</description></item><item><title>Quand faire un audit de code ?</title><link>http://examplesite.org/blog/2017-03-20-quand-faire-un-audit-de-code/</link><pubDate>Mon, 20 Mar 2017 07:52:15 +0100</pubDate><guid>http://examplesite.org/blog/2017-03-20-quand-faire-un-audit-de-code/</guid><description>Dans notre activité, nous sommes amenés à faire régulièrement des audits de code. Planifié ou forcé, un audit a pour but de déterminer la qualité logicielle d&amp;rsquo;une base de code et de faire des préconisations pour améliorer sa santé.</description></item><item><title>Gérer les dépendances circulaires</title><link>http://examplesite.org/blog/2016-12-17-gerer-les-dependances-circulaires/</link><pubDate>Sat, 17 Dec 2016 18:31:18 +0100</pubDate><guid>http://examplesite.org/blog/2016-12-17-gerer-les-dependances-circulaires/</guid><description>Durant mon travail, j&amp;rsquo;ai rencontré des dépendances circulaires dans une application sur laquelle je suis intervenue. Dans sa plus simple forme, il s&amp;rsquo;agit de deux classes qui dépendent l&amp;rsquo;une de l&amp;rsquo;autre.</description></item><item><title>Ecrire des tests avec Spring Boot 1.4</title><link>http://examplesite.org/blog/2016-08-08-ecrire-des-tests-avec-spring-boot-1-dot-4/</link><pubDate>Mon, 08 Aug 2016 07:11:29 +0200</pubDate><guid>http://examplesite.org/blog/2016-08-08-ecrire-des-tests-avec-spring-boot-1-dot-4/</guid><description>La version 1.4 de Spring Boot est sortie le 28 juillet 2016. Elle contient notamment des évolutions importantes au niveau de l&amp;rsquo;écriture des tests.
L&amp;rsquo;objectif de cet article est de voir comment migrer les tests d&amp;rsquo;un controller Spring MVC en utilisant les nouvelles fonctionnalités apportées par cette version.</description></item><item><title>Refactoring d'une application N-Tiers en utilisant le CQRS</title><link>http://examplesite.org/blog/2016-06-26-refactoring-architecture-n-tiers-cqrs/</link><pubDate>Sun, 26 Jun 2016 18:14:40 +0200</pubDate><guid>http://examplesite.org/blog/2016-06-26-refactoring-architecture-n-tiers-cqrs/</guid><description>CQRS, ou Command Query Responsibility Segregation, est une architecture où la partie Command (écriture) et la partie Query (lecture) du système sont séparées.
J&amp;rsquo;ai eu la chance d&amp;rsquo;assister récemment à une présentation de Tomasz Jaskula nommée Recettes CQRS, pour bien cuisiner son architecture.</description></item><item><title>ATDD et TDD double boucle</title><link>http://examplesite.org/blog/2016-05-22-atdd-et-tdd-double-boucle/</link><pubDate>Sun, 22 May 2016 22:27:01 +0200</pubDate><guid>http://examplesite.org/blog/2016-05-22-atdd-et-tdd-double-boucle/</guid><description>L'Acceptance Test Driven Development est une pratique qui consiste à écrire un test d&amp;rsquo;acceptation dès la définition de la fonctionnalité à implémenter. Ce test permet ensuite de valider que l&amp;rsquo;implémentation de la fonctionnalité est terminée.</description></item><item><title>Découverte de Kotlin par la pratique</title><link>http://examplesite.org/blog/2016-05-08-decouverte-de-kotlin-par-la-pratique/</link><pubDate>Sun, 08 May 2016 14:58:45 +0200</pubDate><guid>http://examplesite.org/blog/2016-05-08-decouverte-de-kotlin-par-la-pratique/</guid><description>Kotlin est un langage de programmation créé par JetBrains. Il est exécuté sur la JVM et est 100% interopérable avec Java 1.6+. J&amp;rsquo;ai découvert récemment ce langage et j&amp;rsquo;ai réalisé un ensemble de katas pour le pratiquer.</description></item><item><title>Polymorphisme avec le kata parrot refactoring</title><link>http://examplesite.org/blog/2016-04-20-polymorphisme-avec-le-kata-parrot-refactoring/</link><pubDate>Wed, 20 Apr 2016 16:26:03 +0200</pubDate><guid>http://examplesite.org/blog/2016-04-20-polymorphisme-avec-le-kata-parrot-refactoring/</guid><description>Ce kata est tiré d&amp;rsquo;un exemple du livre &amp;ldquo;Refactoring, Improving the Design of Existing Code&amp;rdquo; de Martin Fowler, et a été créé par Emilie Bache. L&amp;rsquo;exemple contient des signes de mauvais design et permet notamment de pratiquer le polymorphisme.</description></item><item><title>Once upon a time TDD... and me</title><link>http://examplesite.org/blog/2016-04-13-once-upon-a-time-tdd-and-me/</link><pubDate>Wed, 13 Apr 2016 23:56:11 +0200</pubDate><guid>http://examplesite.org/blog/2016-04-13-once-upon-a-time-tdd-and-me/</guid><description>Once upon a time, there was a young woman that had plenty of projects and passions and was a bit hyperactive. She doesn&amp;rsquo;t really enjoy talking about her life and asks herself very seriously how is she going to write this post.</description></item><item><title>Refactoring Is Like Sleeping</title><link>http://examplesite.org/blog/2016-03-10-refactoring-is-like-sleeping/</link><pubDate>Thu, 10 Mar 2016 15:12:42 +0100</pubDate><guid>http://examplesite.org/blog/2016-03-10-refactoring-is-like-sleeping/</guid><description>Bob is a developer. Bob has been asked to add a brand new feature to the application. Bob would like to take this opportunity to refactor a little bit the code because it doesn&amp;rsquo;t respect the good practices that he learnt from the last Software Craftsmanship meetup.</description></item><item><title>Que faire lorsqu'une méthode privée veut être testée ?</title><link>http://examplesite.org/blog/2016-02-21-que-faire-lorsqu-une-methode-privee-veut-etre-testee/</link><pubDate>Sun, 21 Feb 2016 11:09:38 +0100</pubDate><guid>http://examplesite.org/blog/2016-02-21-que-faire-lorsqu-une-methode-privee-veut-etre-testee/</guid><description>Les tests automatisés servent à vérifier le bon comportement d&amp;rsquo;un objet (ou d&amp;rsquo;un ensemble d&amp;rsquo;objets), indépendamment de la manière dont ce comportement est implémenté. Le comportement d&amp;rsquo;un objet est décrit par son API publique (constructeurs, constantes et méthodes publiques).</description></item><item><title>Pourquoi ne pas utiliser l'héritage pour éviter la duplication de code ?</title><link>http://examplesite.org/blog/2016-01-24-heritage-duplication-code/</link><pubDate>Sun, 24 Jan 2016 11:38:41 +0100</pubDate><guid>http://examplesite.org/blog/2016-01-24-heritage-duplication-code/</guid><description>L&amp;rsquo;héritage est une composante très importante des langages orientés objet tels que Java. Cependant, il doit être utilisé à bon escient afin de respecter les bonnes pratiques de programmation.
Il m&amp;rsquo;est arrivé de rencontrer des cas où l&amp;rsquo;héritage était utilisé afin de ne pas dupliquer du code.</description></item><item><title>Testing Spring MVC Controllers</title><link>http://examplesite.org/blog/2015-12-04-testing-spring-mvc-controllers/</link><pubDate>Sat, 31 Oct 2015 12:54:08 +0100</pubDate><guid>http://examplesite.org/blog/2015-12-04-testing-spring-mvc-controllers/</guid><description>Since Spring 3.2 (January, 2013), it is possible to test Spring MVC controllers without an external framework. The goal of this article is to show how to test Spring MVC controllers using only Spring testing capabilities.</description></item><item><title>Exposer des ressources statiques avec Spring MVC</title><link>http://examplesite.org/blog/2015-12-04-exposer-des-ressources-statiques-avec-spring-mvc/</link><pubDate>Fri, 18 Sep 2015 12:59:06 +0100</pubDate><guid>http://examplesite.org/blog/2015-12-04-exposer-des-ressources-statiques-avec-spring-mvc/</guid><description>Il est souvent nécessaire d&amp;rsquo;exposer des ressources statiques telles que des images, des fichiers pdf, des vidéos, etc. dans une application web. Ces fichiers sont stockés sur le serveur et ne sont donc pas accessibles à l&amp;rsquo;utilisateur via une URL.</description></item><item><title>Transférer des paramètres à travers un redirect avec Spring MVC</title><link>http://examplesite.org/blog/2015-12-04-transferer-des-parametres-a-travers-un-redirect-avec-spring-mvc/</link><pubDate>Sat, 25 Jul 2015 12:06:04 +0200</pubDate><guid>http://examplesite.org/blog/2015-12-04-transferer-des-parametres-a-travers-un-redirect-avec-spring-mvc/</guid><description>Dans une application web, il est courant d&amp;rsquo;effectuer une redirection après la soumission d&amp;rsquo;un formulaire. Cette redirection permet notamment de rendre l&amp;rsquo;url bookmarkable et d&amp;rsquo;empêcher l&amp;rsquo;utilisateur de resoumettre le formulaire par erreur (suite à un refresh, par exemple).</description></item><item><title>Spring Security et Spring Boot</title><link>http://examplesite.org/blog/2015-12-04-spring-security-et-spring-boot/</link><pubDate>Sun, 21 Jun 2015 11:51:37 +0200</pubDate><guid>http://examplesite.org/blog/2015-12-04-spring-security-et-spring-boot/</guid><description>Depuis Spring 3.1, il est possible de configurer Spring en Java. La configuration Java de Spring Security est supportée depuis sa version 3.2 (source).
L&amp;rsquo;objectif de cet article est de montrer comment configurer Spring Security en Java config, dans une application Spring Boot, avec une base de données qui contient les utilisateurs et leur mot de passe hashé.</description></item><item><title>Injections de dépendances avec Spring</title><link>http://examplesite.org/blog/2015-12-04-injections-de-dependances-avec-spring/</link><pubDate>Sun, 14 Jun 2015 08:35:20 +0200</pubDate><guid>http://examplesite.org/blog/2015-12-04-injections-de-dependances-avec-spring/</guid><description>Il existe plusieurs méthodes pour injecter une dépendance dans un objet Java :
Injection sur un setter Injection sur le constructeur Injection directe sur la déclaration de l&amp;rsquo;attribut Cet article a pour objectif de définir ces différentes méthodes, de décrire leurs avantages et inconvénients et indiquer leurs cas d&amp;rsquo;utilisation.</description></item></channel></rss>