<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Refactoring on Nadia Humbert-Labeaumaz</title><link>http://examplesite.org/tags/refactoring/</link><description>Recent content in Refactoring on Nadia Humbert-Labeaumaz</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Nadia Humbert-Labeaumaz • 2021</copyright><lastBuildDate>Thu, 20 Jul 2017 15:32:15 +0100</lastBuildDate><atom:link href="http://examplesite.org/tags/refactoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Refactoring Conditional Structures with Map</title><link>http://examplesite.org/blog/2017-07-20-refactoring-conditional-with-map/</link><pubDate>Thu, 20 Jul 2017 15:32:15 +0100</pubDate><guid>http://examplesite.org/blog/2017-07-20-refactoring-conditional-with-map/</guid><description>When working on already existing codebases, I often encounter pieces of code that look like this:
public class Day { public void start(Weather weather) { switch(weather) { case RAINY: takeAnUmbrella(); break; case SUNNY: takeAHat(); break; case STORMY: stayHome(); break; default: doNothing(); break; } } } Basically, depending on the weather, an action has to be taken.</description></item><item><title>Refactoring d'une application N-Tiers en utilisant le CQRS</title><link>http://examplesite.org/blog/2016-06-26-refactoring-architecture-n-tiers-cqrs/</link><pubDate>Sun, 26 Jun 2016 18:14:40 +0200</pubDate><guid>http://examplesite.org/blog/2016-06-26-refactoring-architecture-n-tiers-cqrs/</guid><description>CQRS, ou Command Query Responsibility Segregation, est une architecture où la partie Command (écriture) et la partie Query (lecture) du système sont séparées.
J&amp;rsquo;ai eu la chance d&amp;rsquo;assister récemment à une présentation de Tomasz Jaskula nommée Recettes CQRS, pour bien cuisiner son architecture.</description></item><item><title>Polymorphisme avec le kata parrot refactoring</title><link>http://examplesite.org/blog/2016-04-20-polymorphisme-avec-le-kata-parrot-refactoring/</link><pubDate>Wed, 20 Apr 2016 16:26:03 +0200</pubDate><guid>http://examplesite.org/blog/2016-04-20-polymorphisme-avec-le-kata-parrot-refactoring/</guid><description>Ce kata est tiré d&amp;rsquo;un exemple du livre &amp;ldquo;Refactoring, Improving the Design of Existing Code&amp;rdquo; de Martin Fowler, et a été créé par Emilie Bache. L&amp;rsquo;exemple contient des signes de mauvais design et permet notamment de pratiquer le polymorphisme.</description></item><item><title>Refactoring Is Like Sleeping</title><link>http://examplesite.org/blog/2016-03-10-refactoring-is-like-sleeping/</link><pubDate>Thu, 10 Mar 2016 15:12:42 +0100</pubDate><guid>http://examplesite.org/blog/2016-03-10-refactoring-is-like-sleeping/</guid><description>Bob is a developer. Bob has been asked to add a brand new feature to the application. Bob would like to take this opportunity to refactor a little bit the code because it doesn&amp;rsquo;t respect the good practices that he learnt from the last Software Craftsmanship meetup.</description></item></channel></rss>